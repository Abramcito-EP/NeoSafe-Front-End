import { Injectable, Inject, PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import {
  HttpRequest,
  HttpHandler,
  HttpEvent,
  HttpInterceptor
} from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable()
export class AuthInterceptor implements HttpInterceptor {
  
  constructor(@Inject(PLATFORM_ID) private platformId: Object) {}

  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {
    console.log('ðŸ”„ AuthInterceptor: Interceptando peticiÃ³n:', request.url);
    console.log('ðŸ”„ AuthInterceptor: MÃ©todo:', request.method);
    console.log('ðŸ”„ AuthInterceptor: Headers originales:', request.headers.keys());
    
    if (!isPlatformBrowser(this.platformId)) {
      console.log('ðŸ”„ AuthInterceptor: No es navegador, pasando sin modificar');
      return next.handle(request);
    }
    
    const token = localStorage.getItem('token');
    console.log('ðŸ”„ AuthInterceptor: Token encontrado?', !!token);
    
    if (token) {
      console.log('ðŸ”„ AuthInterceptor: Agregando token a headers');
      const cloned = request.clone({
        headers: request.headers.set('Authorization', `Bearer ${token}`)
      });
      console.log('ðŸ”„ AuthInterceptor: Headers despuÃ©s de agregar token:', cloned.headers.keys());
      return next.handle(cloned);
    }
    
    console.log('ðŸ”„ AuthInterceptor: No hay token, pasando peticiÃ³n sin modificar');
    return next.handle(request);
  }
}